"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8359],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),c=p(n),m=i,u=c["".concat(l,".").concat(m)]||c[m]||h[m]||r;return n?a.createElement(u,s(s({ref:t},d),{},{components:n})):a.createElement(u,s({ref:t},d))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,s=new Array(r);s[0]=c;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:i,s[1]=o;for(var p=2;p<r;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},4548:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var a=n(7462),i=(n(7294),n(3905));const r={sidebar_position:3,keywords:["Unity","serialization","inheritance"]},s="Inheritance",o={unversionedId:"Tutorial/Know_more/inheritance",id:"Tutorial/Know_more/inheritance",title:"Inheritance",description:"Does inheritance work? Yes.",source:"@site/docs/Tutorial/Know_more/inheritance.md",sourceDirName:"Tutorial/Know_more",slug:"/Tutorial/Know_more/inheritance",permalink:"/persyst-docs/Tutorial/Know_more/inheritance",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,keywords:["Unity","serialization","inheritance"]},sidebar:"tutorialSidebar",previous:{title:"Nesting classes",permalink:"/persyst-docs/Tutorial/Know_more/Nesting_classes"},next:{title:"The Pending References System",permalink:"/persyst-docs/Tutorial/Know_more/Pending_references"}},l={},p=[{value:"Private fields of the parent class",id:"private-fields-of-the-parent-class",level:2},{value:"Type of the reference vs type of the object",id:"type-of-the-reference-vs-type-of-the-object",level:2},{value:"Deserializing with a type mismatch",id:"deserializing-with-a-type-mismatch",level:2},{value:"How to avoid this?",id:"how-to-avoid-this",level:3}],d={toc:p};function h(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"inheritance"},"Inheritance"),(0,i.kt)("p",null,"Does inheritance work? Yes."),(0,i.kt)("p",null,"Are there any limitations you need to keep in mind? Also yes."),(0,i.kt)("h2",{id:"private-fields-of-the-parent-class"},"Private fields of the parent class"),(0,i.kt)("p",null,"Persyst will only inspect the class it's given for members tagged as ",(0,i.kt)("inlineCode",{parentName:"p"},"[SaveThis]"),". It will not examine the base class. "),(0,i.kt)("p",null,"That means ",(0,i.kt)("inlineCode",{parentName:"p"},"private")," members of the parent class will not be serialized, only those that are ",(0,i.kt)("inlineCode",{parentName:"p"},"protected")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"public"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},"public class MyMB : MonoBehaviour, ISaveable\n{\n    [SaveThis] ChildClass child;\n}\n\npublic class ParentClass : ISaveable\n{\n    [SaveThis] int aPrivateInt; //no\n    [SaveThis] public int aPublicInt; //yes\n    [SaveThis] protected int aProtectedInt; //yes\n}\n\npublic class ChildClass : ParentClass\n{\n    [SaveThis] int myInt; //yes\n}\n")),(0,i.kt)("h2",{id:"type-of-the-reference-vs-type-of-the-object"},"Type of the reference vs type of the object"),(0,i.kt)("p",null,"When using inheritance, you can have something like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},"public class MyMB : MonoBehaviour, ISaveable\n{\n    [SaveThis] ParentClass child = new ChildClass();\n}\n")),(0,i.kt)("p",null,"In this case, the attribute ",(0,i.kt)("inlineCode",{parentName:"p"},"[SaveThis]")," would make Persyst serialize ",(0,i.kt)("inlineCode",{parentName:"p"},"child")," as an instance of ",(0,i.kt)("inlineCode",{parentName:"p"},"ParentClass"),", rather than ",(0,i.kt)("inlineCode",{parentName:"p"},"ChildClass"),". This is also the default behaviour of the built-in Unity serializer."),(0,i.kt)("p",null,"However, most of the time you will want to keep the actual type of the instace (serialize ",(0,i.kt)("inlineCode",{parentName:"p"},"child")," as a ",(0,i.kt)("inlineCode",{parentName:"p"},"ChildClass")," object, not a ",(0,i.kt)("inlineCode",{parentName:"p"},"ParentClass")," one). You can do this by using the attribute ",(0,i.kt)("inlineCode",{parentName:"p"},"[SaveAsInstanceType]"),". Effectively, this will behave the same way as ",(0,i.kt)("inlineCode",{parentName:"p"},"[SerializeReference]")," does for the built-in serializer."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Remember the previous point. Serializing ",(0,i.kt)("inlineCode",{parentName:"p"},"child")," as ",(0,i.kt)("inlineCode",{parentName:"p"},"ChildClass")," means all the values that are specific to the ",(0,i.kt)("inlineCode",{parentName:"p"},"ChildClass")," get serialized correctly, which is good, but all the private fields of the parent are ignored.")),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"What I've just described is the behaviour of the types handled directly by Persyst (that is, those that implement ",(0,i.kt)("inlineCode",{parentName:"p"},"ISaveable"),"). It is designed to work the same way as the Unity serialization, for the sake of clarity. "),(0,i.kt)("p",{parentName:"admonition"},"The Newtonsoft JSON library does not follow these rules. It always serializes the object as the type of the instance. So, if the type you are serializing is not ",(0,i.kt)("inlineCode",{parentName:"p"},"ISaveable"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"[SaveThis]")," will behave like ",(0,i.kt)("inlineCode",{parentName:"p"},"[SaveAsInstanceType]"),".")),(0,i.kt)("h2",{id:"deserializing-with-a-type-mismatch"},"Deserializing with a type mismatch"),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"This section is just warning you about a thing that won't really happen unless you are actively trying to make it happen. Even if it does happen, it won't ",(0,i.kt)("em",{parentName:"p"},"break")," the serialization, and it's perfectly coherent with how serialization is meant to work. But it's also counterintuitive and confusing."),(0,i.kt)("p",{parentName:"admonition"},"You probably want to avoid doing it, for it will be probably end up causing bugs."),(0,i.kt)("p",{parentName:"admonition"},"Unless you are already running into problems and are searching for an explanation, you might want to ignore this rambling mess altogether.")),(0,i.kt)("p",null,"If you have this class:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},"public class MyMB : MonoBehaviour, ISaveable\n{\n    [SaveThis] ParentClass field = new ParentClass();\n}\n")),(0,i.kt)("p",null,"and read a file where ",(0,i.kt)("inlineCode",{parentName:"p"},"field")," was serialized as a ",(0,i.kt)("inlineCode",{parentName:"p"},"ParentClass"),", then the current instance that ",(0,i.kt)("inlineCode",{parentName:"p"},"field")," refers to is maintained, and only the relevant members are updated. Meaning that, for this definition of ",(0,i.kt)("inlineCode",{parentName:"p"},"ParentClass"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},"public class ParentClass : ISaveable\n{\n    [SaveThis] int privateInt;\n    [SaveThis] protected int protectedInt;\n    int anotherPrivateInt;\n    protected int anotherProtectedInt;\n}\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"myInt")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"protectedInt")," get updated by the Persyst-serialized value, while ",(0,i.kt)("inlineCode",{parentName:"p"},"anotherInt")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"anotherProtectedInt")," retain the value that they already have."),(0,i.kt)("p",null,"..."),(0,i.kt)("p",null,"However, if ",(0,i.kt)("inlineCode",{parentName:"p"},"field")," was serialized at runtime as a ",(0,i.kt)("inlineCode",{parentName:"p"},"ChildClass"),", and its current value is an instance of ",(0,i.kt)("inlineCode",{parentName:"p"},"ParentClass"),", then the current instance is ",(0,i.kt)("strong",{parentName:"p"},"discarded")," and the system creates a new object of ",(0,i.kt)("inlineCode",{parentName:"p"},"ChildClass")," that gets populated with the serialized values. But, since the only one of these values that is both serialized by Persyst and visible by ",(0,i.kt)("inlineCode",{parentName:"p"},"ChildClass")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"protectedInt"),", that is ",(0,i.kt)("strong",{parentName:"p"},"the only one")," that will be recovered."),(0,i.kt)("admonition",{type:"warning"},(0,i.kt)("p",{parentName:"admonition"},"This means the value of all other members of the existing ",(0,i.kt)("inlineCode",{parentName:"p"},"ParentClass")," instance will be lost. Not overwritten by a meaningful serialized value, but instead reset to the default value of that datatype."),(0,i.kt)("p",{parentName:"admonition"},"While this is not undefined behaviour (what I've just explained is exactly what will happen), this can ",(0,i.kt)("em",{parentName:"p"},"very easily")," cause bugs. You might expect the values of the parent that are not marked as ",(0,i.kt)("inlineCode",{parentName:"p"},"[SaveThis]")," to remain unchanged, as Persyst will not explicitly overwrite them, but ",(0,i.kt)("strong",{parentName:"p"},"that's not what will happen. Those values will be lost."))),(0,i.kt)("h3",{id:"how-to-avoid-this"},"How to avoid this?"),(0,i.kt)("p",null,"Honestly, this is a difficult to make happen. It will be literally be shorter to explain how to ",(0,i.kt)("em",{parentName:"p"},"cause")," the situation than how to avoid it."),(0,i.kt)("p",null,"These:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},"[SerializeField][SaveThis] ParentClass a;\n[SerializeField][SaveAsInstanceType] ParentClass b;\n[SerializeReference][SaveThis] ParentClass c;\n[SerializeReference][SaveAsInstanceType] ParentClass d;\n")),(0,i.kt)("p",null,"are ",(0,i.kt)("strong",{parentName:"p"},"all"),' fine. This "problem" is not the two serialization systems clashing. It\'s something that can only happen because of changes made at runtime.'),(0,i.kt)("p",null,"If you do this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},"[SerializeField][SaveAsInstanceType] ParentClass b;\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"b")," is serialized by Unity as ",(0,i.kt)("inlineCode",{parentName:"p"},"ParentClass"),". So, on loading the scene, ",(0,i.kt)("inlineCode",{parentName:"p"},"b")," is an instance of ",(0,i.kt)("inlineCode",{parentName:"p"},"ParentClass"),". Now, during runtime, you do something like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},"b = new ChildClass();\n")),(0,i.kt)("p",null,"Now you save the game with Persyst, and ",(0,i.kt)("inlineCode",{parentName:"p"},"b")," is serialized as a ",(0,i.kt)("inlineCode",{parentName:"p"},"ChildClass")," instance. If you now close the application and open it again, ",(0,i.kt)("inlineCode",{parentName:"p"},"b")," gets initialized by Unity to be an instance of ",(0,i.kt)("inlineCode",{parentName:"p"},"ParentClass"),"."),(0,i.kt)("p",null,"If you now make some modifications to the ",(0,i.kt)("inlineCode",{parentName:"p"},"private")," fields of ",(0,i.kt)("inlineCode",{parentName:"p"},"b"),", and ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"afterwards"))," load the Persyst save file, ",(0,i.kt)("strong",{parentName:"p"},"that")," is when you run into the problem. ",(0,i.kt)("inlineCode",{parentName:"p"},"b")," gets set to a new instance of ",(0,i.kt)("inlineCode",{parentName:"p"},"ChildClass"),", and the modifications you have made during this session are lost as the existing instance of ",(0,i.kt)("inlineCode",{parentName:"p"},"ParentClass")," is discarded."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"To re-iterate, this will not happen if the current value of ",(0,i.kt)("inlineCode",{parentName:"p"},"b")," matches the type of the serialized value. In that case, no new instance is created, and only the values of the serialized fields are changed.")))}h.isMDXComponent=!0}}]);