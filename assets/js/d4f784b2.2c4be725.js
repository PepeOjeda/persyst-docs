"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[949],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(n),u=a,h=m["".concat(l,".").concat(u)]||m[u]||d[u]||i;return n?r.createElement(h,o(o({ref:t},p),{},{components:n})):r.createElement(h,o({ref:t},p))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3253:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const i={sidebar_position:6,keywords:["Unity","serialize references","SerializeReference"]},o="Serializing references",s={unversionedId:"Getting started/serializing_references",id:"Getting started/serializing_references",title:"Serializing references",description:"Beyond the same basics that apply to serializing everything else, there are some extra rules when serializing references.",source:"@site/docs/Getting started/serializing_references.md",sourceDirName:"Getting started",slug:"/Getting started/serializing_references",permalink:"/persyst-docs/Getting started/serializing_references",draft:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6,keywords:["Unity","serialize references","SerializeReference"]},sidebar:"tutorialSidebar",previous:{title:"What can be serialized?",permalink:"/persyst-docs/Getting started/Serializable_data"},next:{title:"I want to know more!",permalink:"/persyst-docs/category/i-want-to-know-more"}},l={},c=[{value:"Persistent objects for everyone",id:"persistent-objects-for-everyone",level:2},{value:"ScriptableObjects",id:"scriptableobjects",level:2},{value:"References inside a nested class",id:"references-inside-a-nested-class",level:2}],p={toc:c};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"serializing-references"},"Serializing references"),(0,a.kt)("p",null,"Beyond the same ",(0,a.kt)("a",{parentName:"p",href:"script_annotation"},"basics")," that apply to serializing everything else, there are some extra rules when serializing references. "),(0,a.kt)("h2",{id:"persistent-objects-for-everyone"},"Persistent objects for everyone"),(0,a.kt)("p",null,"If you have a ",(0,a.kt)("inlineCode",{parentName:"p"},"MonoBehaviour")," like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},"public class MyData : MonoBehaviour, ISaveable\n{\n    [SaveThis] GameObject otherGO;\n}\n")),(0,a.kt)("p",null,"In order for the reference to be properly serialized, you need to add a ",(0,a.kt)("inlineCode",{parentName:"p"},"PersistentObject")," to ",(0,a.kt)("strong",{parentName:"p"},"both")," this object and the referenced one. This is required because only objects with a ",(0,a.kt)("inlineCode",{parentName:"p"},"PersistentObject")," component have a UID, and UIDs are ",(0,a.kt)("a",{parentName:"p",href:"Fundamentals_of_serialization"},"how references are serialized"),". This also applies to referencing a ",(0,a.kt)("inlineCode",{parentName:"p"},"Component"),", like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},"public class MyData : MonoBehaviour, ISaveable\n{\n    [SaveThis] Transform otherTransform;\n    [SaveThis] MB otherMonoBehaviour;\n}\n")),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"In the case above, the custom ",(0,a.kt)("inlineCode",{parentName:"p"},"MonoBehaviour")," class MB ",(0,a.kt)("strong",{parentName:"p"},"does not need")," to implement ",(0,a.kt)("inlineCode",{parentName:"p"},"ISaveable"),". The only important thing is that it is attached to a ",(0,a.kt)("inlineCode",{parentName:"p"},"GameObject")," that has a ",(0,a.kt)("inlineCode",{parentName:"p"},"PersistentObject"),".")),(0,a.kt)("p",null,"Again all of this is necesary because the only objects with a UID are those with a ",(0,a.kt)("inlineCode",{parentName:"p"},"PersistentObject"),". "),(0,a.kt)("p",null,"Wait... the only ones?"),(0,a.kt)("h2",{id:"scriptableobjects"},"ScriptableObjects"),(0,a.kt)("p",null,"You can reference ",(0,a.kt)("inlineCode",{parentName:"p"},"ScriptableObjects")," too! But wait, a ",(0,a.kt)("inlineCode",{parentName:"p"},"ScriptableObject")," can't have ",(0,a.kt)("inlineCode",{parentName:"p"},"Components"),"... so how does it get a UID? Well, like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},"public class SO : SerializableScriptableObject{ \n}\n")),(0,a.kt)("p",null,"The base class ",(0,a.kt)("inlineCode",{parentName:"p"},"SerializableScriptableObject")," does everything you need, so  you just need to inherit from it. If you already have a complex inheritance tree with ropes and pulleys, and are despairing over not being able to use this, may I remind you that every tree has a root. If the base class derives from ",(0,a.kt)("inlineCode",{parentName:"p"},"SerializableScriptableObject"),", then they all do. And thus, they can all be referenced. Convenient!"),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"If you are using a ",(0,a.kt)("a",{parentName:"p",href:"scene_setup"},"one-manager-per-scene")," setup, the UIDs of ",(0,a.kt)("inlineCode",{parentName:"p"},"ScriptableObject")," instances will be stored in all of them (it gets stored the first time you open the scene after creating the ",(0,a.kt)("inlineCode",{parentName:"p"},"ScriptableObject"),"). This is fine, and actually desirable, as it means you can reference it from anywhere. However, when you delete the ",(0,a.kt)("inlineCode",{parentName:"p"},"ScriptableObject"),", its UID will only be removed from the manager which is currently open. "),(0,a.kt)("p",{parentName:"admonition"},"This won't break the system or anything, but if for some reason you are creating and deleting lots of ",(0,a.kt)("inlineCode",{parentName:"p"},"ScriptableObjects"),", it will create lots of useless entries in every UID manager, adding (a bit) to the memory footprint of the application for no good reason at all."),(0,a.kt)("p",{parentName:"admonition"},"That's mainly why the ",(0,a.kt)("a",{parentName:"p",href:"scene_setup"},"one-manager-in-its-own-scene")," setup is preferable.")),(0,a.kt)("h2",{id:"references-inside-a-nested-class"},"References inside a nested class"),(0,a.kt)("p",null,"See ",(0,a.kt)("a",{parentName:"p",href:"/Know_more/Nesting_classes"},"Nesting classes"),". The TL;DR is this works as long as all the classes in the chain are marked as ISaveable."))}d.isMDXComponent=!0}}]);